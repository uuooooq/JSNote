{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Content","Layout","httpPre","storage","window","localStorage","removeItem","tmpListData","JSON","parse","getItem","setItem","stringify","App","state","value","myData","inputValue","onChange","e","console","log","target","setState","onKeyDown","keyCode","ctrlKey","event","preventDefault","cancelBubble","onSave","searchData","this","fetchData","document","addEventListener","removeEventListener","length","sendToServer","fetch","then","response","ok","json","Error","status","data","catch","error","requestFailed","valueStr","formData","FormData","append","method","body","offsetTop","style","display","width","flexDirection","backgroundColor","justifyContent","alignItems","onClick","bind","handleChange","placeholder","flexGrow","flex","itemLayout","dataSource","size","renderItem","item","padding","pagination","page","pageSize","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6c3fa91a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Affix, Button, List, Divider, Radio } from 'antd';\nimport { Layout } from 'antd';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport 'antd/dist/antd.css';\nconst { Content } = Layout;\n\n//const httpPre = 'http://'+window.location.host //http://192.168.1.103:8080\nconst httpPre = 'http://192.168.1.103:8080'\n\n\nvar listData = [];\n\n\nvar storage = window.localStorage\nif (storage) {\n  storage.removeItem('personalStorage')\n  var tmpListData = JSON.parse(storage.getItem('personalStorageNew'))\n  if (!tmpListData) {\n    storage.setItem('personalStorageNew', JSON.stringify(listData))\n  }\n\n}\n\n\n\nexport default class App extends React.Component {\n\n\n  state = {\n    value: 1,\n    myData: [],\n    inputValue: '',\n  };\n\n\n  onChange = e => {\n    console.log('radio checked', e.target.value);\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n\n\n  componentWillMount() {\n    this.fetchData()\n    document.addEventListener(\"keydown\", this.onKeyDown)\n\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown)\n  }\n\n  onKeyDown = (e) => {\n    // eslint-disable-next-line default-case\n    console.log('you press key ' + e.keyCode)\n    // switch( e.keyCode) {\n    //   case 13://回车事件\n    //     break\n    //   default:\n    //     break\n    // }\n    if (83 == e.keyCode && e.ctrlKey) {\n      window.event.preventDefault()//\n      window.event.cancelBubble = true//IE\n      this.onSave();\n      console.log('you press key keydown ' + e.keyCode)\n    }\n    if (67 == e.keyCode && e.ctrlKey) {\n      window.event.preventDefault()//\n      window.event.cancelBubble = true//IE\n      this.setState({\n        inputValue: '',\n      })\n      console.log('you press key keydown ' + e.keyCode)\n    }\n    if (70 == e.keyCode && e.ctrlKey) {\n        window.event.preventDefault()//\n        window.event.cancelBubble = true//IE\n        this.setState({\n          myData: [],\n        })\n        this.searchData()\n      console.log('you press key keydown ' + e.keyCode)\n    }\n  }\n\n  handleChange(e) {\n    // console.log(e.target.value)\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  onSave(e) {\n\n    if(this.state.inputValue.length <1){\n      return;\n    }\n\n    this.sendToServer(this.state.inputValue)\n    //this.state.myData.\n    if (tmpListData) {\n      this.setState({\n        inputValue: '',\n      })\n    }\n  }\n\n  fetchData() {\n    fetch(httpPre + '/hello?start=0&end=100')\n      .then((response) => {\n        if (!response.ok) throw new Error(response.status);\n        else return response.json();\n      })\n      .then((data) => {\n        this.setState({ myData: data });\n        console.log(data);\n      })\n      .catch((error) => {\n        console.log('error: ' + error);\n        this.setState({ requestFailed: true });\n      });\n\n  }\n\n  searchData(){\n    fetch(httpPre+'/search?searchWord='+this.state.inputValue).then((response) => {\n      if (!response.ok) throw new Error(response.status);\n      else return response.json();\n    })\n    .then((data) =>{\n      this.setState({ myData: data });\n      console.log(data);\n    })\n    .catch((error) => {\n      console.log('error: ' + error);\n      this.setState({ requestFailed: true });\n    });\n  }\n\n  sendToServer(valueStr) {\n    let url = httpPre//\"http://192.168.1.6:8080\";\n    let formData = new FormData();\n\n    formData.append('value', valueStr);\n\n    fetch(url, {\n      method: 'post',\n      body: formData,\n    }).then((response) => {\n      if (!response.ok) throw new Error(response.status);\n      else return response.json();\n    })\n      .then((data) => {\n        this.setState({ myData: data });\n        console.log(data);\n      })\n      .catch((error) => {\n        console.log('error: ' + error);\n        //this.setState({ requestFailed: true });\n      });\n  }\n\n  createTextDisplay(value) {\n    return (\n      <div>\n        <pre>{value}</pre>\n      </div>\n    );\n  }\n\n  render() {\n\n    return (\n\n      <div>\n        <Layout>\n          <Content>\n            <Affix offsetTop={0} >\n              <div style={{ display: 'flex', width: '100%', flexDirection: 'column' }}>\n                <div style={{ display: 'flex', width: '100%', backgroundColor: 'white', flexDirection: 'row', justifyContent: 'flex-end', alignItems: 'baseline' }}>\n                  <Button>取消(ctrl+c)</Button>\n                  <Button onClick={this.onSave.bind(this)} >保存(ctrl+s)</Button>\n                </div>\n                <div style={{ display: 'flex', width: '100%', backgroundColor: 'gray', flexDirection: 'row' }}>\n                  <TextareaAutosize onChange={this.handleChange.bind(this)} placeholder=\"请输入内容\" value={this.state.inputValue} style={{ flexGrow: '1' }} />\n                </div>\n\n              </div>\n            </Affix>\n            <div style={{ display: 'flex', flex: '1', flexDirection: 'column', backgroundColor: 'white' }}>\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={this.state.myData}\n                size=\"large\"\n                renderItem={item => (\n                  <div style={{ display: 'flex', flex: '1', flexDirection: 'column' }}>\n                    <div style={{ display: 'flex', flex: '1', padding: '10px' }}>\n                      <pre>{item.value}</pre>\n                    </div>\n\n                    <Divider></Divider>\n                  </div>\n\n                )}\n                pagination={{\n                  onChange: page => {\n                    console.log(page);\n                  },\n                  pageSize: 30,\n                }}\n              />\n            </div>\n\n\n          </Content>\n\n        </Layout>\n\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}